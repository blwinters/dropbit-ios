# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_version '2.140.0'

default_platform(:ios)

platform :ios do

  before_all do |lane|
    lanes_to_exclude = [:quick_test, :register, :local_test, :local_unit_tests, :autogen]
    unless lanes_to_exclude.include?(lane)
      clear_derived_data
      bundle_install
      brew(command: "bundle")
      config_tooling
      cocoapods(repo_update: true)
      autogen
    end
  end

  desc "Change toolset per supplied Xcode version in `xcversion.config` file."
  lane :config_tooling do
    path = File.read("xcversion.config").strip
    puts "found Xcode path: #{path}"
    xcode_select(path)
  end

  desc "Autogenerate Swift code with Sourcery. Current working dir for Fastlane's context is ./fastlane"
  lane :autogen do
    if File.exists?("../env-vars.sh")
      File.readlines("../env-vars.sh").each do |line|
        # assumes lines in file begin with "export" keyword followed by space
        env = line.split(" ")
        values = env[1].split("=")
        ENV[values[0]]=values[1].gsub('\n','')
      end
    end
    arguments = [
      "analyticsProdKey=#{ENV['ANALYTICS_PROD_API_KEY']}",
      "analyticsTestKey=#{ENV['ANALYTICS_TEST_API_KEY']}",
      "keyDerivationSalt=#{ENV['KEY_DERIVATION_SALT']}",
      "keyDerivationIterations=#{ENV['KEY_DERIVATION_ITERATIONS']}",
      "deviceEndpointProdPlatform=#{ENV['DEVICE_ENDPOINT_PROD_PLATFORM']}",
      "deviceEndpointTestPlatform=#{ENV['DEVICE_ENDPOINT_TEST_PLATFORM']}",
      "deviceEndpointProdApplication=#{ENV['DEVICE_ENDPOINT_PROD_APPLICATION']}",
      "deviceEndpointTestApplication=#{ENV['DEVICE_ENDPOINT_TEST_APPLICATION']}",
      "fakeWords=#{ENV['GENERATED_FAKE_WORDS']}",
      "firebaseApiKey=#{ENV['FIREBASE_API_KEY']}",
      "recoverOnlyWords=#{ENV['GENERATED_RECOVER_ONLY_WORDS']}",
      "recoverOnlyFirstMainnetAddress=#{ENV['GENERATED_RECOVER_FIRST_MAINNET_ADDRESS']}",
      "recoverOnlyLegacyWords=#{ENV['GENERATED_RECOVER_ONLY_LEGACY_WORDS']}",
      "recoverOnlyLegacyDeactivatedWords=#{ENV['GENERATED_RECOVER_ONLY_LEGACY_DEACTIVATED_WORDS']}",
      "twitterConsumerKey=#{ENV['TWITTER_CONSUMER_KEY']}",
      "twitterConsumerSecret=#{ENV['TWITTER_CONSUMER_SECRET']}",
      "twitterRequestTokenURL=#{ENV['TWITTER_REQUEST_TOKEN_URL']}",
      "twitterAuthorizeURL=#{ENV['TWITTER_AUTHORIZE_URL']}",
      "twitterAccessTokenURL=#{ENV['TWITTER_ACCESS_TOKEN_URL']}"
    ].join(',')
    sh(
      "/usr/local/bin/sourcery",
      "--sources",
      "../CoinKeeper",
      "--templates",
      "../templates/",
      "--output",
      "../CoinKeeper/Autogenerated",
      "--args",
      arguments
    )
  end

  desc "Set build number to current CI Job Number, no commit"
  lane :increment_build do
    increment_build_number(build_number: "#{ENV['CI_JOB_ID']}")
  end

  desc "Set app version number to current CI Branch name, if applicable"
  private_lane :set_version_if_applicable do
    branch = ENV["CI_COMMIT_REF_NAME"]
    if !branch.nil? && branch.start_with?("release-v")
      version = branch.split("release-v").last
      increment_version_number(version_number: version)
    end
  end

  desc "Register new devices"
  lane :register do
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(force: true)
  end

  # testing
  desc "Local testing, without resetting simulators or cleaning."
  lane :local_test do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'
    scan
  end

  desc "Local unit testing, without resetting simulators or cleaning."
  lane :local_unit_tests do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'
    scan
  end

  desc "Local testing (unit tests only), without resetting simulators or cleaning."
  lane :unit_tests do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'
    scan
  end

  desc "Local testing (UI tests only), without resetting simulators or cleaning."
  lane :local_ui_tests do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'
    scan
  end

  desc "Local testing, without the before_all lane"
  lane :quick_test do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'
    scan
  end

  desc "Runs full test suite with clean simulator installations."
  lane :test do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'
    reset_sims
    scan
  end

  desc "Runs UI tests"
  lane :ui_tests do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'
    reset_sims
    scan
  end

  # building
  # deployment
  desc "Deploy to TestFlight for beta testing"
  lane :beta do
    puts "*** Starting lane beta ***"
    build_and_upload
  end

  desc "Deploy to AppStoreConnect for release"
  lane :deploy do
    puts "*** Starting lane deploy ***"
    build_and_upload
  end

  private_lane :build_and_upload do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'
    increment_build # lane defined above, encapsulating `increment_build_number` call
    set_version_if_applicable # lane defined above, setting version to match that in branch name
    match
    gym
    groups = ENV["PILOT_GROUPS"].split(",")
    changelog = changelog_from_git_commits
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      demo_account_required: false,
      changelog: changelog,
      beta_app_description: "Test all the things",
      distribute_external: true,
      groups: groups
    )
  end

  # private
  private_lane :reset_sims do |lane|
    puts "************************************"
    puts "...resetting simulator contents..."
    sh 'ruby reset_sims.rb'
    puts "...done resetting simulator contents..."
    puts "************************************"
  end
end
