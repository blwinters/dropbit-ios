// Objective-C API for talking to git.coinninja.net/engineering/cnlib Go package.
//   gobind -lang=objc -prefix="CNB" git.coinninja.net/engineering/cnlib
//
// File is generated by gobind. Do not edit.

#ifndef __CNBCnlib_H__
#define __CNBCnlib_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class CNBCnlibBaseCoin;
@class CNBCnlibDerivationPath;
@class CNBCnlibHDWallet;
@class CNBCnlibImportedPrivateKey;
@class CNBCnlibLightningInvoice;
@class CNBCnlibMetaAddress;
@class CNBCnlibPreviousOutputInfo;
@class CNBCnlibRBFOption;
@class CNBCnlibTransactionChangeMetadata;
@class CNBCnlibTransactionData;
@class CNBCnlibTransactionDataFlatFee;
@class CNBCnlibTransactionDataSendMax;
@class CNBCnlibTransactionDataStandard;
@class CNBCnlibTransactionMetadata;
@class CNBCnlibUTXO;

/**
 * BaseCoin is used to provide information about the current user's wallet.
 */
@interface CNBCnlibBaseCoin : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewBaseCoin instantiates a new object and sets values
 */
- (nullable instancetype)init:(long)purpose coin:(long)coin account:(long)account;
@property (nonatomic) long purpose;
@property (nonatomic) long coin;
@property (nonatomic) long account;
/**
 * GetBech32HRP returns a Bech32 HRP string derived from Purpose and Coin
 */
- (NSString* _Nonnull)getBech32HRP:(NSError* _Nullable* _Nullable)error;
/**
 * HRPFromAddress decodes the given address, and if a SegWit address, returns the HRP.
 */
- (NSString* _Nonnull)hrpFromAddress:(NSString* _Nullable)addr error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateAccount updates the coin account on the BaseCoin receiver.
 */
- (void)updateAccount:(long)account;
/**
 * UpdateCoin updates the coin value on the BaseCoin receiver.
 */
- (void)updateCoin:(long)coin;
/**
 * UpdatePurpose updates the purpose value on the BaseCoin receiver.
 */
- (void)updatePurpose:(long)purpose;
@end

/**
 * DerivationPath is used to provide information about an address to be generated.
 */
@interface CNBCnlibDerivationPath : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewDerivationPath instantiates a new object and sets values.
 */
- (nullable instancetype)init:(CNBCnlibBaseCoin* _Nullable)bc change:(long)change index:(long)index;
@property (nonatomic) CNBCnlibBaseCoin* _Nullable baseCoin;
@property (nonatomic) long change;
@property (nonatomic) long index;
- (NSString* _Nonnull)getBech32HRP:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)hrpFromAddress:(NSString* _Nullable)addr error:(NSError* _Nullable* _Nullable)error;
- (void)updateAccount:(long)account;
- (void)updateCoin:(long)coin;
- (void)updatePurpose:(long)purpose;
@end

/**
 * HDWallet represents the user's current wallet.
 */
@interface CNBCnlibHDWallet : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewHDWalletFromWords returns a pointer to an HDWallet, containing the BaseCoin, words, and unexported master private key.
 */
- (nullable instancetype)initFromWords:(NSString* _Nullable)wordString basecoin:(CNBCnlibBaseCoin* _Nullable)basecoin;
@property (nonatomic) CNBCnlibBaseCoin* _Nullable baseCoin;
@property (nonatomic) NSString* _Nonnull walletWords;
/**
 * BuildTransactionMetadata will generate the tx metadata needed for client to consume.
 */
- (CNBCnlibTransactionMetadata* _Nullable)buildTransactionMetadata:(CNBCnlibTransactionData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
/**
 * ChangeAddressForIndex returns a change MetaAddress derived from the current wallet, BaseCoin, and index.
 */
- (CNBCnlibMetaAddress* _Nullable)changeAddressForIndex:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * CheckForAddress scans the wallet for a given address up to a given index on both receive/change chains.
 */
- (CNBCnlibMetaAddress* _Nullable)checkForAddress:(NSString* _Nullable)a upTo:(long)upTo error:(NSError* _Nullable* _Nullable)error;
/**
 * CoinNinjaVerificationKeyHexString returns the hex-encoded string of the signing pubkey byte slice.
 */
- (NSString* _Nonnull)coinNinjaVerificationKeyHexString:(NSError* _Nullable* _Nullable)error;
/**
 * DecodeLightningInvoice returns a reference to an invoice.Invoice object if valid, or error if invalid.
 */
- (CNBCnlibLightningInvoice* _Nullable)decodeLightningInvoice:(NSString* _Nullable)invoice error:(NSError* _Nullable* _Nullable)error;
/**
 * DecryptMessage decrypts a payload using signing key (m/42) and included sender public key (expected to be last 65 bytes of payload).
 */
- (NSData* _Nullable)decryptMessage:(NSData* _Nullable)body error:(NSError* _Nullable* _Nullable)error;
/**
 * DecryptWithKeyFromDerivationPath decrypts a given payload with the key derived from given derivation path.
 */
- (NSData* _Nullable)decryptWithKeyFromDerivationPath:(CNBCnlibDerivationPath* _Nullable)path body:(NSData* _Nullable)body error:(NSError* _Nullable* _Nullable)error;
/**
 * EncryptMessage encrypts a payload using signing key (m/42) and recipient's public key.
 */
- (NSData* _Nullable)encryptMessage:(NSData* _Nullable)body recipientUncompressedPubkey:(NSString* _Nullable)recipientUncompressedPubkey error:(NSError* _Nullable* _Nullable)error;
/**
 * EncryptWithEphemeralKey encrypts a given body (byte slice) using ECDH symmetric key encryption by creating an ephemeral keypair from entropy and given uncompressed public key.
 */
- (NSData* _Nullable)encryptWithEphemeralKey:(NSData* _Nullable)entropy body:(NSData* _Nullable)body recipientUncompressedPubkey:(NSString* _Nullable)recipientUncompressedPubkey error:(NSError* _Nullable* _Nullable)error;
/**
 * ImportPrivateKey accepts an encoded private key from a paper wallet/QR code, decodes it, and returns a ref to an ImportedPrivateKey struct, or error if failed.
 */
- (CNBCnlibImportedPrivateKey* _Nullable)importPrivateKey:(NSString* _Nullable)encodedKey error:(NSError* _Nullable* _Nullable)error;
/**
 * ReceiveAddressForIndex returns a receive MetaAddress derived from the current wallet, BaseCoin, and index.
 */
- (CNBCnlibMetaAddress* _Nullable)receiveAddressForIndex:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * SignData signs a given message and returns the signature in bytes.
 */
- (NSData* _Nullable)signData:(NSData* _Nullable)message error:(NSError* _Nullable* _Nullable)error;
/**
 * SignatureSigningData signs a given message and returns the signature in hex-encoded string format.
 */
- (NSString* _Nonnull)signatureSigningData:(NSData* _Nullable)message error:(NSError* _Nullable* _Nullable)error;
/**
 * SigningKey returns the private key at the m/42 path.
 */
- (NSData* _Nullable)signingKey:(NSError* _Nullable* _Nullable)error;
/**
 * SigningPublicKey returns the public key at the m/42 path.
 */
- (NSData* _Nullable)signingPublicKey:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateCoin updates the pointer stored to a new instance of BaseCoin. Fetched MetaAddresses will reflect updated coin.
 */
- (void)updateCoin:(CNBCnlibBaseCoin* _Nullable)c;
@end

/**
 * ImportedPrivateKey encapsulates the possible receive addresses to check for funds. When found, set that address to `SelectedAddress`.
 */
@interface CNBCnlibImportedPrivateKey : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull possibleAddresses;
@property (nonatomic) NSString* _Nonnull privateKeyAsWIF;
@property (nonatomic) CNBCnlibPreviousOutputInfo* _Nullable previousOutputInfo;
@end

/**
 * LightningInvoice is a wrapper type for returning a decoded LN invoice
 */
@interface CNBCnlibLightningInvoice : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long numSatoshis;
@property (nonatomic) NSString* _Nonnull description;
@property (nonatomic) BOOL isExpired;
@property (nonatomic) int64_t expiresAt;
@end

/**
 * MetaAddress is a model object which holds meta info about an address.
 */
@interface CNBCnlibMetaAddress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewMetaAddress creates and returns a pointer to a MetaAddress object.
 */
- (nullable instancetype)init:(NSString* _Nullable)address path:(CNBCnlibDerivationPath* _Nullable)path uncompressedPublicKey:(NSString* _Nullable)uncompressedPublicKey;
@property (nonatomic) NSString* _Nonnull address;
@property (nonatomic) CNBCnlibDerivationPath* _Nullable derivationPath;
@property (nonatomic) NSString* _Nonnull uncompressedPublicKey;
/**
 * IsReceiveAddress computes if the address is a receive address, vs change address.
 */
- (BOOL)isReceiveAddress;
@end

/**
 * PreviousOutputInfo contains selectedAddress, txid, index about the funding utxo.
 */
@interface CNBCnlibPreviousOutputInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPreviousOutputInfo exposes an initializer to the client to provide previous output info to ImportedPrivateKey.
 */
- (nullable instancetype)init:(NSString* _Nullable)selectedAddress txid:(NSString* _Nullable)txid index:(long)index amount:(long)amount;
@property (nonatomic) NSString* _Nonnull selectedAddress;
@property (nonatomic) NSString* _Nonnull txid;
@property (nonatomic) long index;
@property (nonatomic) long amount;
@end

/**
 * RBFOption is a struct wrapping an int for RBF preferred value. Value should be `MustBeRBF` (0), `MustNotBeRBF` (1), or `AllowedToBeRBF` (2).
 */
@interface CNBCnlibRBFOption : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewRBFOption returns a pointer to RBFOption.
 */
- (nullable instancetype)init:(long)value;
@property (nonatomic) long value;
@end

/**
 * TransactionChangeMetadata holds info about the change back to the user's wallet as an output of a transaction.
 */
@interface CNBCnlibTransactionChangeMetadata : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull address;
@property (nonatomic) CNBCnlibDerivationPath* _Nullable path;
@property (nonatomic) long voutIndex;
@end

/**
 * TransactionData is the main object containing all info necessary to build a bitcoin transaction.
Will retain references to all pointers, no need to carry on externally.
 */
@interface CNBCnlibTransactionData : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull paymentAddress;
@property (nonatomic) long amount;
@property (nonatomic) long feeAmount;
@property (nonatomic) long changeAmount;
@property (nonatomic) CNBCnlibDerivationPath* _Nullable changePath;
@property (nonatomic) long locktime;
@property (nonatomic) CNBCnlibRBFOption* _Nullable rbfOption;
/**
 * AddUTXO Adds a utxo to the private array.
 */
- (void)addUTXO:(CNBCnlibUTXO* _Nullable)utxo;
/**
 * RequiredUTXOAtIndex returns a utxo that has been selected to be included in the outgoing transaction, or error if out of bounds.
 */
- (CNBCnlibUTXO* _Nullable)requiredUTXOAtIndex:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * UtxoCount returns count of UTXOs required to satisfy the transaction, not all UTXOs passed in before calling `Generate`.
 */
- (long)utxoCount;
@end

/**
 * TransactionDataFlatFee adopts the Transaction interface, customizing the generation of the transaction.
 */
@interface CNBCnlibTransactionDataFlatFee : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewTransactionDataFlatFee Create transaction data object with a flat fee, versus calculated via number of inputs/outputs.

Once created, add all available utxos one at a time using `addUTXO` function, as gomobile does not support custom arrays/slices. This method will select the ones needed.

Default RBFOption is MustBeRBF.

@param paymentAddress The address to which you want to send currency.
@param coin The coin representing the current user's wallet.
@param amount The amount which you would like to send to the receipient.
@param flatFee The flat-fee to pay, NOT a rate. This fee, added to amount, will equal the total deducted from the wallet.
@param changePath The derivative path for receiving change, if any. Retains reference.
@param blockHeight The current block height, used to calculate the locktime (blockHeight + 1).
@return Returns an instantiated object if fully able to satisfy amount+fee with UTXOs, or nil if insufficient funds.
 */
- (nullable instancetype)init:(NSString* _Nullable)paymentAddress basecoin:(CNBCnlibBaseCoin* _Nullable)basecoin amount:(long)amount flatFee:(long)flatFee changePath:(CNBCnlibDerivationPath* _Nullable)changePath blockHeight:(long)blockHeight;
@property (nonatomic) CNBCnlibTransactionData* _Nullable transactionData;
/**
 * AddUTXO Adds a utxo to the private array.
 */
- (void)addUTXO:(CNBCnlibUTXO* _Nullable)utxo;
/**
 * Generate is called after all available utxo's have been added, to configure the transaction data. Builds a standard transaction with a flat fee.
 */
- (BOOL)generate:(NSError* _Nullable* _Nullable)error;
@end

/**
 * TransactionDataSendMax adopts the Transaction interface, customizing the generation of the transaction.
 */
@interface CNBCnlibTransactionDataSendMax : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) CNBCnlibTransactionData* _Nullable transactionData;
/**
 * AddUTXO Adds a utxo to the private array.
 */
- (void)addUTXO:(CNBCnlibUTXO* _Nullable)utxo;
/**
 * Generate is called after all available utxo's have been added, to configure the transaction data. Builds a transaction sending max with a fee rate.
 */
- (BOOL)generate:(NSError* _Nullable* _Nullable)error;
@end

/**
 * TransactionDataStandard adopts the Transaction interface, customizing the generation of the transaction.
 */
@interface CNBCnlibTransactionDataStandard : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewTransactionDataStandard Create transaction data object using a fee rate, calculating fee via number of inputs and outputs.

Once created, add all available utxos one at a time using `addUTXO` function, as gomobile does not support custom arrays/slices. This method will select the ones needed.

@param paymentAddress The address to which you want to send currency.
@param coin The coin representing the current user's wallet.
@param amount The amount which you would like to send to the receipient.
@param feeRate The fee rate to be multiplied by the estimated transaction size.
@param changePath The derivative path for receiving change, if any. Retains reference.
@param blockHeight The current block height, used to calculate the locktime (blockHeight + 1).
@param rbfOption A ref to a RBFOption object passed to the transaction builder to determind replaceability. Retains reference.
@return Returns an instantiated object if fully able to satisfy amount+fee with UTXOs, or nil if insufficient funds.
 */
- (nullable instancetype)init:(NSString* _Nullable)paymentAddress basecoin:(CNBCnlibBaseCoin* _Nullable)basecoin amount:(long)amount feeRate:(long)feeRate changePath:(CNBCnlibDerivationPath* _Nullable)changePath blockHeight:(long)blockHeight rbfOption:(CNBCnlibRBFOption* _Nullable)rbfOption;
@property (nonatomic) CNBCnlibTransactionData* _Nullable transactionData;
/**
 * AddUTXO Adds a utxo to the private array.
 */
- (void)addUTXO:(CNBCnlibUTXO* _Nullable)utxo;
/**
 * Generate is called after all available utxo's have been added, to configure the transaction data. Builds a standard transaction with a fee rate.
 */
- (BOOL)generate:(NSError* _Nullable* _Nullable)error;
@end

/**
 * TransactionMetadata is the main object containing the txid and encoded tx for an outgoing transaction, with associated change metadata, if necessary.
 */
@interface CNBCnlibTransactionMetadata : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull txid;
@property (nonatomic) NSString* _Nonnull encodedTx;
@property (nonatomic) CNBCnlibTransactionChangeMetadata* _Nullable transactionChangeMetadata;
@end

/**
 * UTXO is a type used to manage an unspent transaction output. Use `Path` if deriving a private key from wallet's derivation path, or `ImportedPrivateKey` if sweeping a direct private key.
 */
@interface CNBCnlibUTXO : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewUTXO instantiates a new UTXO object and returns a ref to it.
 */
- (nullable instancetype)init:(NSString* _Nullable)txid index:(long)index amount:(long)amount path:(CNBCnlibDerivationPath* _Nullable)path importedPrivateKey:(CNBCnlibImportedPrivateKey* _Nullable)importedPrivateKey isConfirmed:(BOOL)isConfirmed;
@property (nonatomic) NSString* _Nonnull txid;
@property (nonatomic) long index;
@property (nonatomic) long amount;
@property (nonatomic) CNBCnlibDerivationPath* _Nullable path;
@property (nonatomic) CNBCnlibImportedPrivateKey* _Nullable importedPrivateKey;
@property (nonatomic) BOOL isConfirmed;
@end

/**
 * Following constants are used for RBFOption.
 */
FOUNDATION_EXPORT const long CNBCnlibAllowedToBeRBF;
/**
 * Following constants are used for RBFOption.
 */
FOUNDATION_EXPORT const long CNBCnlibMustBeRBF;
/**
 * Following constants are used for RBFOption.
 */
FOUNDATION_EXPORT const long CNBCnlibMustNotBeRBF;
/**
 * PlaceholderDestination is a constant which can be used to indicate a destination is not yet selected, but tx size needs to be estimated.
 */
FOUNDATION_EXPORT NSString* _Nonnull const CNBCnlibPlaceholderDestination;

@interface CNBCnlib : NSObject
+ (CNBCnlibBaseCoin* _Nullable) baseCoinBip49MainNet;
+ (void) setBaseCoinBip49MainNet:(CNBCnlibBaseCoin* _Nullable)v;

+ (CNBCnlibBaseCoin* _Nullable) baseCoinBip49TestNet;
+ (void) setBaseCoinBip49TestNet:(CNBCnlibBaseCoin* _Nullable)v;

+ (CNBCnlibBaseCoin* _Nullable) baseCoinBip84MainNet;
+ (void) setBaseCoinBip84MainNet:(CNBCnlibBaseCoin* _Nullable)v;

+ (CNBCnlibBaseCoin* _Nullable) baseCoinBip84TestNet;
+ (void) setBaseCoinBip84TestNet:(CNBCnlibBaseCoin* _Nullable)v;

@end

/**
 * AddressIsBase58CheckEncoded decodes the address, returns true if address is base58check encoded.
 */
FOUNDATION_EXPORT BOOL CNBCnlibAddressIsBase58CheckEncoded(NSString* _Nullable addr, NSError* _Nullable* _Nullable error);

/**
 * AddressIsValidSegwitAddress decodes the address, returns true if is a witness type.
 */
FOUNDATION_EXPORT BOOL CNBCnlibAddressIsValidSegwitAddress(NSString* _Nullable addr, NSError* _Nullable* _Nullable error);

/**
 * GetFullBIP39WordListString returns all 2,048 BIP39 mnemonic words as a space-separated string.
 */
FOUNDATION_EXPORT NSString* _Nonnull CNBCnlibGetFullBIP39WordListString(void);

/**
 * Max returns max of two ints.
 */
FOUNDATION_EXPORT long CNBCnlibMax(long a, long b);

/**
 * NewBaseCoin instantiates a new object and sets values
 */
FOUNDATION_EXPORT CNBCnlibBaseCoin* _Nullable CNBCnlibNewBaseCoin(long purpose, long coin, long account);

/**
 * NewDerivationPath instantiates a new object and sets values.
 */
FOUNDATION_EXPORT CNBCnlibDerivationPath* _Nullable CNBCnlibNewDerivationPath(CNBCnlibBaseCoin* _Nullable bc, long change, long index);

/**
 * NewHDWalletFromWords returns a pointer to an HDWallet, containing the BaseCoin, words, and unexported master private key.
 */
FOUNDATION_EXPORT CNBCnlibHDWallet* _Nullable CNBCnlibNewHDWalletFromWords(NSString* _Nullable wordString, CNBCnlibBaseCoin* _Nullable basecoin);

/**
 * NewMetaAddress creates and returns a pointer to a MetaAddress object.
 */
FOUNDATION_EXPORT CNBCnlibMetaAddress* _Nullable CNBCnlibNewMetaAddress(NSString* _Nullable address, CNBCnlibDerivationPath* _Nullable path, NSString* _Nullable uncompressedPublicKey);

/**
 * NewPreviousOutputInfo exposes an initializer to the client to provide previous output info to ImportedPrivateKey.
 */
FOUNDATION_EXPORT CNBCnlibPreviousOutputInfo* _Nullable CNBCnlibNewPreviousOutputInfo(NSString* _Nullable selectedAddress, NSString* _Nullable txid, long index, long amount);

/**
 * NewRBFOption returns a pointer to RBFOption.
 */
FOUNDATION_EXPORT CNBCnlibRBFOption* _Nullable CNBCnlibNewRBFOption(long value);

/**
 * NewTransactionDataFlatFee Create transaction data object with a flat fee, versus calculated via number of inputs/outputs.

Once created, add all available utxos one at a time using `addUTXO` function, as gomobile does not support custom arrays/slices. This method will select the ones needed.

Default RBFOption is MustBeRBF.

@param paymentAddress The address to which you want to send currency.
@param coin The coin representing the current user's wallet.
@param amount The amount which you would like to send to the receipient.
@param flatFee The flat-fee to pay, NOT a rate. This fee, added to amount, will equal the total deducted from the wallet.
@param changePath The derivative path for receiving change, if any. Retains reference.
@param blockHeight The current block height, used to calculate the locktime (blockHeight + 1).
@return Returns an instantiated object if fully able to satisfy amount+fee with UTXOs, or nil if insufficient funds.
 */
FOUNDATION_EXPORT CNBCnlibTransactionDataFlatFee* _Nullable CNBCnlibNewTransactionDataFlatFee(NSString* _Nullable paymentAddress, CNBCnlibBaseCoin* _Nullable basecoin, long amount, long flatFee, CNBCnlibDerivationPath* _Nullable changePath, long blockHeight);

/**
 * NewTransactionDataSendingMax Send max amount to a given address, minus the calculated fee based on size of transaction times feeRate.

Once created, add all available utxos one at a time using `addUTXO` function, as gomobile does not support custom arrays/slices. This method will select the ones needed.

Default RBFOption is MustNotBeRBF.

@param paymentAddress The address to which you want to send currency.
@param coin The coin representing the current user's wallet.
@param feeRate The fee rate to be multiplied by the estimated transaction size.
@param blockHeight The current block height, used to calculate the locktime (blockHeight + 1).
@return Returns an instantiated object if fully able to satisfy amount+fee with UTXOs, or nil if insufficient funds. This would only be
nil if the funding amount is less than the fee.
 */
FOUNDATION_EXPORT CNBCnlibTransactionDataSendMax* _Nullable CNBCnlibNewTransactionDataSendingMax(NSString* _Nullable paymentAddress, CNBCnlibBaseCoin* _Nullable basecoin, long feeRate, long blockHeight);

/**
 * NewTransactionDataStandard Create transaction data object using a fee rate, calculating fee via number of inputs and outputs.

Once created, add all available utxos one at a time using `addUTXO` function, as gomobile does not support custom arrays/slices. This method will select the ones needed.

@param paymentAddress The address to which you want to send currency.
@param coin The coin representing the current user's wallet.
@param amount The amount which you would like to send to the receipient.
@param feeRate The fee rate to be multiplied by the estimated transaction size.
@param changePath The derivative path for receiving change, if any. Retains reference.
@param blockHeight The current block height, used to calculate the locktime (blockHeight + 1).
@param rbfOption A ref to a RBFOption object passed to the transaction builder to determind replaceability. Retains reference.
@return Returns an instantiated object if fully able to satisfy amount+fee with UTXOs, or nil if insufficient funds.
 */
FOUNDATION_EXPORT CNBCnlibTransactionDataStandard* _Nullable CNBCnlibNewTransactionDataStandard(NSString* _Nullable paymentAddress, CNBCnlibBaseCoin* _Nullable basecoin, long amount, long feeRate, CNBCnlibDerivationPath* _Nullable changePath, long blockHeight, CNBCnlibRBFOption* _Nullable rbfOption);

/**
 * NewUTXO instantiates a new UTXO object and returns a ref to it.
 */
FOUNDATION_EXPORT CNBCnlibUTXO* _Nullable CNBCnlibNewUTXO(NSString* _Nullable txid, long index, long amount, CNBCnlibDerivationPath* _Nullable path, CNBCnlibImportedPrivateKey* _Nullable importedPrivateKey, BOOL isConfirmed);

/**
 * NewWordListFromEntropy returns a space-separated list of mnemonic words from entropy.
 */
FOUNDATION_EXPORT NSString* _Nonnull CNBCnlibNewWordListFromEntropy(NSData* _Nullable entropy, NSError* _Nullable* _Nullable error);

#endif
